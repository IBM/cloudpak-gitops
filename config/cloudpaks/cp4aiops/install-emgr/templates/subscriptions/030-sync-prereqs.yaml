---
apiVersion: batch/v1
kind: Job
metadata:
  name: sync-emgr-prereqs
  annotations:
    argocd.argoproj.io/sync-wave: "30"
    argocd.argoproj.io/hook: Sync
  namespace: openshift-gitops
spec:
  template:
    spec:
      containers:
        - name: config
          image: quay.io/openshift/origin-cli:latest
          imagePullPolicy: IfNotPresent
          resources:
            requests:
              memory: "64Mi"
              cpu: "200m"
            limits:
              memory: "64Mi"
              cpu: "250m"
          env:
            - name: ARGOCD_NAMESPACE
              value: openshift-gitops
            - name: IBM_ENTITLEMENT_SECRET
              value: ibm-entitlement-key
            - name: TARGET_NAMESPACE
              value: "{{.Values.metadata.argocd_app_namespace}}"
          command:
            - /bin/sh
            - -c
            - |
              set -eo pipefail
              set -x

              result=0
              # https://www.ibm.com/docs/en/cloud-paks/cloud-pak-watson-aiops/3.2.0?topic=em-starter-installation
              oc extract secret/"${IBM_ENTITLEMENT_SECRET}" \
                  --namespace "${ARGOCD_NAMESPACE}" \
                  --keys=.dockerconfigjson \
                  --to=/tmp \
                  --confirm \
              && if oc get secret noi-registry-secret --namespace "${TARGET_NAMESPACE}" 2>/dev/null ; then
                    oc patch secret noi-registry-secret \
                        --namespace "${TARGET_NAMESPACE}" \
                        --patch "{\"data\": {\".dockerconfigjson\": \"$(cat /tmp/.dockerconfigjson | base64 -w0)\" }}"
                 else
                     oc create secret docker-registry noi-registry-secret \
                        --namespace "${TARGET_NAMESPACE}" \
                        --from-file=.dockerconfigjson=/tmp/.dockerconfigjson
                 fi \
              && rm -rf /tmp/.dockerconfigjson \
              && if [ $(oc get ingresscontroller default -n openshift-ingress-operator -o jsonpath='{.status.endpointPublishingStrategy.type}') = "HostNetwork" ]; then
                     oc patch namespace default --type=json -p '[{"op":"add","path":"/metadata/labels","value":{"network.openshift.io/policy-group":"ingress"}}]'
                 fi \
              && echo "INFO: Event Manager prereq configuration successful." \
              || result=1

              # https://www.ibm.com/docs/en/noi/1.6.4?topic=preparing-your-cluster
              oc get ServiceAccount noi-service-account --namespace "${TARGET_NAMESPACE}" -o yaml 2> /dev/null \
              && echo "INFO: NOI service account exists." \
              || {
                  echo "INFO: Create the NOI service account with the entitlement key pull secret."
                  oc create serviceaccount noi-service-account -n "${TARGET_NAMESPACE}" \
                  && oc adm policy add-scc-to-user privileged system:serviceaccount:${TARGET_NAMESPACE}:noi-service-account \
                  && oc patch serviceaccount noi-service-account -p '{"imagePullSecrets": [{"name": "noi-registry-secret"}]}' -n "${TARGET_NAMESPACE}" \
                  && oc get sa noi-service-account -n "${TARGET_NAMESPACE}" \
                  || result=1

                  if [ ! ${result} -eq 0 ]; then
                    oc delete ServiceAccount noi-service-account --namespace "${TARGET_NAMESPACE}"
                  fi
              }

              if [ ${result} -eq 0 ]; then
                  echo "INFO: Event Manager prereq configuration successful."
              else
                  echo "ERROR: Event Manager prereq configuration failed."
              fi

              exit ${result}

      restartPolicy: Never
      serviceAccountName: {{.Values.serviceaccount.ibm_cloudpaks_installer}}
  backoffLimit: 1
