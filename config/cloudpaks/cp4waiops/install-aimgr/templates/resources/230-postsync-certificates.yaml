---
# https://www.ibm.com/docs/en/cloud-paks/cloud-pak-watson-aiops/4.1.0?topic=pak-using-custom-certificate
# Section "12. Configure signed certificates for NGINX"
apiVersion: batch/v1
kind: Job
metadata:
  annotations:
    argocd.argoproj.io/sync-wave: "230"
    argocd.argoproj.io/hook: Sync
  name: post-cp4waiops-adjust-certs
  namespace: openshift-gitops
spec:
  template:
    spec:
      containers:
        - name: config
          image: quay.io/openshift/origin-cli:latest
          imagePullPolicy: IfNotPresent
          env:
            - name: TARGET_NAMESPACE
              value: "{{.Values.metadata.argocd_app_namespace}}"
          command:
            - /bin/sh
            - -c
            - |
              set -eo pipefail
              set -x

              export HOME=/tmp

              cd $HOME \
              && oc project "${TARGET_NAMESPACE}" \
              && oc get ZenService/iaf-zen-cpdservice \
              || {
                  echo "ERROR: Unable to retrieve ZenService instance."
                  exit 1
              }

              secret_set=$(oc get ZenService/iaf-zen-cpdservice -o jsonpath={.spec.zenCustomRoute.route_secret})
              if [ "${secret_set}" == "customer-tls-secret" ]; then
                  echo "INFO: External secret already set."
                  exit 0
              fi

              result=0
              ingress_secret_name=$(oc get ingresscontroller.operator default \
                  --namespace openshift-ingress-operator \
                  -o jsonpath='{.spec.defaultCertificate.name}') || result=1

              if [ -n "${ingress_secret_name}" ] && [ "${result}" -eq 0 ]; then
                  echo "INFO: Create a secret called customer-tls-secret with your custom certificates." \
                  && oc extract secret/${ingress_secret_name} \
                      -n openshift-ingress \
                      --keys=tls.crt,tls.key \
                      --confirm \
                  && oc delete secret customer-tls-secret \
                      --ignore-not-found=true \
                  && sed -n `sed -n '/END CERTIFICATE/=' tls.crt | head -1`',$p' tls.crt | tail -n +2 > ca.crt \
                  && sed -i '/END/q' tls.crt \
                  && oc create secret generic customer-tls-secret \
                      --from-file=tls.crt=tls.crt \
                      --from-file=tls.key=tls.key \
                      --from-file=ca.crt=ca.crt \
                      --dry-run=client -o yaml \
                      | oc apply -f - \
                  && echo "INFO: Restart the nginx pods to pickup the new custom certificates." \
                  && oc rollout restart Deployment/ibm-nginx \
                  && oc rollout status Deployment/ibm-nginx \
                  && echo "INFO: Patch ZenService with the new customer-tls-secret." \
                  && oc patch ZenService/iaf-zen-cpdservice \
                      --type merge \
                      -p '{"spec":{"zenCustomRoute":{"route_reencrypt":true,"route_secret": "customer-tls-secret"}}}' \
                  && echo "INFO: Patch IBM Cloud PakÂ® foundational services with the new custom certificate." \
                  && cs_namespace=$(oc get operandrequest ibm-aiops-common-services -o jsonpath={.spec.requests[0].registryNamespace}) \
                  && oc -n "${cs_namespace}" patch managementingress default --type merge --patch '{"spec":{"ignoreRouteCert":true}}' \
                  && oc -n "${cs_namespace}" delete certificates.v1alpha1.certmanager.k8s.io route-cert \
                     --ignore-not-found=true \
                  && oc -n "${cs_namespace}" delete secret route-tls-secret \
                      --ignore-not-found=true \
                  && oc -n "${cs_namespace}" create secret generic route-tls-secret \
                      --from-file=tls.crt=tls.crt \
                      --from-file=tls.key=tls.key \
                      --from-file=ca.crt=ca.crt \
                  && oc -n "${cs_namespace}" delete secret ibmcloud-cluster-ca-cert \
                  && oc -n "${cs_namespace}" rollout restart deployment auth-idp \
                  && oc -n "${cs_namespace}" rollout status deployment auth-idp --timeout=5m \
                  && oc -n "${cs_namespace}" rollout restart deployment operand-deployment-lifecycle-manager \
                  && oc -n "${cs_namespace}" rollout status deployment operand-deployment-lifecycle-manager --timeout=5m \
                  && echo "INFO: Custom certificate is set." \
                  && oc wait zenservice iaf-zen-cpdservice --for=jsonpath='{.status.zenStatus}'=Completed --timeout=30m \
                  || {
                      echo "ERROR: Custom certificate could not be set." \"
                      result=1
                  }
              fi

              exit ${result}

      restartPolicy: Never
      serviceAccountName: {{.Values.serviceaccount.ibm_cloudpaks_installer}}
  backoffLimit: 2
