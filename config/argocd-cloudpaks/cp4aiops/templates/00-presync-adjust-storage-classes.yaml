---
apiVersion: batch/v1
kind: Job
metadata:
  name: "cp4aiops-storage-classes"
  annotations:
    argocd.argoproj.io/hook: PreSync
  namespace: openshift-gitops
spec:
  template:
    spec:
      containers:
        - name: config
          image: quay.io/openshift/origin-cli:latest
          resources:
            requests:
              memory: "64Mi"
              cpu: "250m"
            limits:
              memory: "128Mi"
              cpu: "500m"
          env:
            - name: ARGOCD_APP_NAME
              value: "cp4aiops-app"
            - name: ARGOCD_NAMESPACE
              value: "openshift-gitops"
          command:
            - /bin/sh
            - -c
            - |
              set -eo pipefail
              set -x
              api_url=$(oc get Infrastructure cluster  -o jsonpath={.status.apiServerURL})

              storage_class_rwo=""
              storage_class_rwx=""
              if [[ "${api_url}" == *fyre.ibm.com* ]]; then
                 storage_class_rwo="{{.Values.storageclass.rwo.fyre}}"
                 storage_class_rwx="{{.Values.storageclass.rwx.fyre}}"
              else
                platform=$(oc get Infrastructure cluster  -o jsonpath={.status.platform})
                if [ "${platform}" == "AWS" ]; then
                  storage_class_rwo="{{.Values.storageclass.rwo.aws}}"
                  storage_class_rwx="{{.Values.storageclass.rwx.aws}}"
                elif [ "${platform}" == "IBMCloud" ]; then
                  vpc_class=$(oc get StorageClass | grep -c "ibmc-vpc" || result=0)
                  if [ ${vpc_class} -gt 0 ]; then
                      storage_class_rwo="{{.Values.storageclass.rwo.roksgen2}}"
                      storage_class_rwx="{{.Values.storageclass.rwx.roksgen2}}"
                  else
                      storage_class_rwo="{{.Values.storageclass.rwo.roks}}"
                      storage_class_rwx="{{.Values.storageclass.rwx.roks}}"
                  fi
                fi
              fi
              if [ -z "${storage_class_rwo}" ] || [ -z "${storage_class_rwx}" ] ; then
                echo "ERROR: Did not find storage classes for target platform."
                exit
              fi

              app_patch=/tmp/patch.json
              cat<<EOF > "${app_patch}"
              [
                {
                  "op": "add",
                  "path": "/spec/source/helm/parameters/0",
                  "value": {
                    "forceString": true,
                    "name": "storageclass.rwo.effective",
                    "value": "${storage_class_rwo}"
                  }
                },
                {
                  "op": "add",
                  "path": "/spec/source/helm/parameters/0",
                  "value": {
                    "forceString": true,
                    "name": "storageclass.rwx.effective",
                    "value": "${storage_class_rwx}"
                  }
                }

              ]
              EOF

              echo "INFO: Patching application ${ARGOCD_APP_NAME}."
              helm_params=$(oc get Application "${ARGOCD_APP_NAME}" --namespace "${ARGOCD_NAMESPACE}" -o yaml -o jsonpath={.spec.source.helm.parameters})
              if [[ ! ${helm_params} == *${storage_class_rwo}* ]] ||
                 [[ ! ${helm_params} == *${storage_class_rwx}* ]]; then
                  oc patch Application "${ARGOCD_APP_NAME}" \
                      --namespace "${ARGOCD_NAMESPACE}" \
                      -o yaml \
                      --type=json \
                      --patch-file "${app_patch}" \
                  && echo "INFO: Patched application ${ARGOCD_APP_NAME}." \
                  || echo "ERROR: Failed to patch application ${ARGOCD_APP_NAME}."
              else
                  echo "INFO: Application ${ARGOCD_APP_NAME} was already patched."
              fi
              echo "INFO: Application ${ARGOCD_APP_NAME} current helm parameters:"
              oc get Application "${ARGOCD_APP_NAME}" \
                    --namespace "${ARGOCD_NAMESPACE}" \
                    -o jsonpath={.spec.source.helm.parameters}

      restartPolicy: Never
      serviceAccountName: {{.Values.serviceaccount.argocd_application_controller}}
  backoffLimit: 2
