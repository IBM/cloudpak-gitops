---
apiVersion: batch/v1
kind: Job
metadata:
  name: cp4a-adjust-prereq-config
  annotations:
    argocd.argoproj.io/hook: PreSync
  namespace: openshift-gitops
spec:
  template:
    spec:
      containers:
        - name: config
          image: registry.redhat.io/openshift4/ose-cli:latest
          imagePullPolicy: IfNotPresent
          env:
            - name: ARGOCD_APP_NAME
              value: cp4a-app
            - name: ARGOCD_NAMESPACE
              value: "{{.Values.metadata.argocd_namespace}}"
          command:
            - /bin/sh
            - -c
            - |
              set -eo pipefail
              set -x

              red_hat_cert_manager=$(oc get configmap argocd-cp4a-config \
                  --namespace "${ARGOCD_NAMESPACE}" -o jsonpath='{.data.red_hat_cert_manager}')

              # https://www.ibm.com/docs/en/cloud-paks/cp-biz-automation/21.0.x?topic=deployment-installing-capabilities-in-operator-hub
              platform=$(oc get configmap argocd-cp4a-config \
                  --namespace "${ARGOCD_NAMESPACE}" -o jsonpath='{.data.shared_configuration\.sc_deployment_platform}')

              echo "INFO: Install Argo CLI."
              # Install it from cluster, not from Internet, so airgap scenarios still work
              argo_route="${ARGOCD_NAMESPACE}-server"
              argo_secret="${ARGOCD_NAMESPACE}-cluster"

              export HOME=/tmp
              argo_cmd="${HOME}/argocd"
              result=0

              linux_arch=$(uname -p)
              argocd_cli_arch=amd64
              if [ "${linux_arch}" == "ppc64le" ] || [ "${linux_arch}" == "s390x" ]; then
                  argocd_cli_arch=${linux_arch}
              fi

              argo_url=$(oc get route ${argo_route} -n ${ARGOCD_NAMESPACE} -ojsonpath='{.spec.host}') \
              && cli_status=$(curl -skL "${argo_url}/download/argocd-linux-${argocd_cli_arch}" \
                  -o "${argo_cmd}" \
                  -w "%{http_code}") \
              || result=1

              if [ "${cli_status}" != "200" ]; then
                  echo "ERROR: Unable to download argocd client."
                  exit 2
              fi

              chmod 755 "${argo_cmd}" \
              && argo_pwd=$(oc get secret ${argo_secret} -n ${ARGOCD_NAMESPACE} -ojsonpath='{.data.admin\.password}' | base64 -d ; echo ) \
              && "${argo_cmd}" login "${argo_url}" --username admin --password "${argo_pwd}" --insecure \
              && "${argo_cmd}" app set "${ARGOCD_APP_NAME}" \
                  --helm-set-string red_hat_cert_manager="${red_hat_cert_manager}" \
                  --helm-set-string spec.shared_configuration.sc_deployment_platform="${platform}" \
              && echo "INFO: ${ARGOCD_APP_NAME} successfully updated OCP platform." \
              || result=1

              echo "INFO: Application ${ARGOCD_APP_NAME} current parameters:"
              "${argo_cmd}" app get "${ARGOCD_APP_NAME}" --show-params

              exit ${result}
      restartPolicy: Never
      serviceAccountName: {{.Values.serviceaccount.argocd_application_controller}}
  backoffLimit: 2
