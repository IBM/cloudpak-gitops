---
apiVersion: batch/v1
kind: Job
metadata:
  name: cp4a-storage-classes
  annotations:
    argocd.argoproj.io/hook: PreSync
  namespace: openshift-gitops
spec:
  template:
    spec:
      containers:
        - name: config
          image: quay.io/openshift/origin-cli:latest
          imagePullPolicy: IfNotPresent
          resources:
            requests:
              memory: "64Mi"
              cpu: "250m"
            limits:
              memory: "96Mi"
              cpu: "300m"
          env:
            - name: ARGOCD_APP_NAME
              value: cp4a-app
            - name: ARGOCD_NAMESPACE
              value: openshift-gitops
          command:
            - /bin/sh
            - -c
            - |
              set -eo pipefail
              set -x
              storage_class_gold="$(oc get configmap argocd-cp4a-config \
                --namespace "${ARGOCD_NAMESPACE}" -o jsonpath='{.data.storageclass\.gold}')"
              storage_class_silver="$(oc get configmap argocd-cp4a-config \
                --namespace "${ARGOCD_NAMESPACE}" -o jsonpath='{.data.storageclass\.silver}')"
              storage_class_bronze="$(oc get configmap argocd-cp4a-config \
                --namespace "${ARGOCD_NAMESPACE}" -o jsonpath='{.data.storageclass\.bronze}')"
              storage_class_block="$(oc get configmap argocd-cp4a-config \
                --namespace "${ARGOCD_NAMESPACE}" -o jsonpath='{.data.storageclass\.block}')" 
              echo "Storage class block: " ${storage_class_block}             
              if [ -z "${storage_class_gold}" ] || [ -z "${storage_class_silver}" ] || [ -z "${storage_class_bronze}" ] || [ -z "${storage_class_block}" ]; then
                echo "ERROR: Did not find storage classes for target platform."
                exit 1
              fi

              echo "INFO: Install Argo CLI."
              # Install it from cluster, not from Internet, so airgap scenarios still work
              argo_route=openshift-gitops-server
              argo_secret=openshift-gitops-cluster
              if [ {{.Values.serviceaccount.argocd_application_controller}} == argocd-cluster-argocd-application-controller ]; then
                  argo_route=argocd-cluster-server
                  argo_secret=argocd-cluster-cluster
              fi

              export HOME=/tmp
              argo_cmd="${HOME}/argocd"
              result=0

              argo_url=$(oc get route ${argo_route} -n ${ARGOCD_NAMESPACE} -ojsonpath='{.spec.host}') \
              && curl -skL "${argo_url}/download/argocd-linux-amd64" -o "${argo_cmd}" \
              && chmod 755 "${argo_cmd}" \
              && argo_pwd=$(oc get secret ${argo_secret} -n ${ARGOCD_NAMESPACE} -ojsonpath='{.data.admin\.password}' | base64 -d ; echo ) \
              && "${argo_cmd}" login "${argo_url}" --username admin --password "${argo_pwd}" --insecure \
              || result=1

              if [ ${result} -eq 0 ]; then
                  echo "INFO: Patching storage for ${ARGOCD_APP_NAME}." \
                  && "${argo_cmd}" app set "${ARGOCD_APP_NAME}" \
                      --helm-set-string storageclass.bronze="${storage_class_bronze}" \
                      --helm-set-string storageclass.gold="${storage_class_gold}" \
                      --helm-set-string storageclass.silver="${storage_class_silver}" \
                      --helm-set-string storageclass.block="${storage_class_block}" \
                  && echo "INFO: ${ARGOCD_APP_NAME} successfully updated storage classes." \
                  || result=1
              else
                  echo "ERROR: Unable to login to Argo."
              fi

              echo "INFO: Application ${ARGOCD_APP_NAME} current helm parameters:"
              "${argo_cmd}" app get "${ARGOCD_APP_NAME}" --show-params

              exit ${result}

      restartPolicy: Never
      serviceAccountName: {{.Values.serviceaccount.argocd_application_controller}}
  backoffLimit: 4
